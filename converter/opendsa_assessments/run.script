#!/usr/bin/env python3

import sys
import subprocess
import re
from lib.grade import send_partial, send_partial_v2, FORMAT_V2_HTML

sys.path.append('/usr/share/codio/assessments')


def run_unit_tests(static):
    p = subprocess.Popen(f'javac -d /tmp/ {file_path} {ex_private_path}/Tester.java', shell=True,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    out, compile_error = p.communicate()
    compile_error = compile_error.strip()

    if p.returncode != 0:
        err_match = re.search(r'^\S+\.java:\s*([0-9]+)\s*:\s*(?:warning:\s*)?(.*)', compile_error)
        err_type = re.search(r'^\s*(found|expected|required|symbol)\s*:\s*(.*)', compile_error, flags=re.MULTILINE)

        insert_marker_re = re.compile(r"(.*?)[ ]*\b___\b", flags=re.DOTALL)
        match = insert_marker_re.search(wrapper_code)
        if not match:
            return "ERROR: no answer insertion marker in wrapper code", 1, 0, 0

        pre_lines = match.group(1)
        pre_lines_count = pre_lines.count("\n")
        answer_lines_count = wrapper_code.count("\n") if answer_code else 0
        line_no = int(err_match.group(1)) - pre_lines_count
        if line_no > answer_lines_count:
            line_no = answer_lines_count
        if err_type:
            error_message = f'line {line_no}: {err_match.group(2)}: {err_type.group(2)}'
        else:
            error_message = f'line {line_no}: {err_match.group(2)}'
        return error_message, 1, 0, 0

    p = subprocess.Popen(f'java -cp /tmp/ Tester', shell=True, stdout=subprocess.PIPE, universal_newlines=True)
    out, runtime_error = p.communicate()
    out = out.strip()

    if p.returncode != 0:
        return runtime_error, p.returncode, 0, 0

    out = out.split('\n')
    total_tests = out.pop(0)
    passed_tests = out.pop(0)
    method_name = out.pop(0)
    feedback_output = '\n'.join(out)

    if static:
        static_output, static_ret_code = run_static_checks(method_name)
        if static_ret_code == 0:
            feedback_output += static_output
        else:
            return static_output, 1, 0, 0

    return feedback_output, 0, total_tests, passed_tests


def get_required_count(value):
    required_min_count = 1
    required_max_count = None
    count_prohibited = re.search(r'\s*(prohibited|false|no|absent|not\s*found)\s*', value)
    has_min_and_max_count = re.search(r'\s*{\s*([0-9]+)\s*,\s*([0-9]+)\s*}\s*', value)
    has_max_count = re.search(r'\s*{\s*,\s*([0-9]+)\s*}\s*', value)
    has_min_count = re.search(r'\s*{\s*([0-9]+)\s*,\s*}\s*', value)
    if count_prohibited:
        required_min_count = 0
        required_max_count = 0
    elif has_min_and_max_count:
        required_min_count = int(has_min_and_max_count[1])
        required_max_count = int(has_min_and_max_count[2])
    elif has_max_count:
        required_min_count = 0
        required_max_count = int(has_max_count[1])
    elif has_min_count:
        required_min_count = int(has_min_count[1])
    return required_min_count, required_max_count


def get_static_check_regex(value, method):
    if re.search(r'^\s*(loops?)\s*', value):
        return r'\b(for|while|do)\b', 'loops'
    if re.search(r'^\s*(recursion)\s*', value):
        return r'\b((this)\s*\.\s*|)(' + method + r')\s*\(', 'recursion'
    if re.search(r'^\s*methods?\s*:\s*', value):
        method_name = re.search(r'\s*methods?\s*:\s*(?:\.\s*|)(.*?)\s*\(\)', value)[1]
        return r'\b(\s*\.\s*|)(' + method_name + r')\s*\(\)', f'method: {method_name}()'
    return value, ''


def without_comments(data):
    return re.sub(r'(/\*([^*]|(\*+[^*/]))*\*+/)|(//[^\r\n]*)', '', data)


def apply_static_check(line, method):
    negative_feedback = ''

    values = line.split('|||')
    if len(values) > 3:
        negative_feedback = values[3]

    check_regex, check_type = get_static_check_regex(values[0], method)
    required_min_count, required_max_count = get_required_count(values[1])
    answer = without_comments(answer_code)

    matched = re.findall(check_regex, answer)
    actual_count = len(matched)

    if actual_count < required_min_count:
        if negative_feedback == '':
            negative_feedback = f'Answer must use {check_type}'
            if required_min_count > 1:
                negative_feedback = f'{negative_feedback} at least {required_min_count} time(s)'
        return negative_feedback, 1
    elif required_max_count is not None and actual_count > required_max_count:
        if negative_feedback == '':
            negative_feedback = f'Answer cannot use {check_type}'
            if required_max_count > 0:
                negative_feedback = f'{negative_feedback} more than {required_max_count} time(s)'
            else:
                negative_feedback = f'{negative_feedback}'
        return negative_feedback, 1

    return f'{values[0]} -> {values[1]}', 0


def run_static_checks(method):
    out = ''
    for line in static_checks.split('\n'):
        output, ret_code = apply_static_check(line, method)
        if ret_code != 0:
            return output, 1
        out += f'\n{output}\nTest <span style="color:green"><b>PASSED</b></span>\n'
    return f'\n\n{out}', 0


def read_file(f_path):
    with open(f_path) as file:
        return file.read()


if __name__ == '__main__':
    error_msg = ''
    ex_path = ''
    ex_private_path = ''
    file_path = ''
    class_name = ''

    if len(sys.argv) > 1:
        class_name = sys.argv[1]
        ex_path = f'{sys.argv[2]}'
        ex_private_path = f'.guides/secure/assessments/{ex_path}'
        file_path = f'{ex_private_path}/{class_name}.java'

    static_checks = read_file(f'{ex_private_path}/static_checks')
    wrapper_code = read_file(f'{ex_private_path}/wrapper_code.java')
    answer_code = read_file(f'exercises/{ex_path}/starter_code.java')
    code = re.sub(r"\b___\b", answer_code, wrapper_code)

    with open(file_path, 'w', encoding="utf-8") as f:
        f.write(code)

    feedback, ret_code, total_tests, passed_tests = run_unit_tests(static_checks)

    if ret_code == 0:
        grade = round(int(passed_tests) / int(total_tests) * 100)
    else:
        grade = 0

    output = f'{feedback}<br/><br/><h1>Total Grade: {grade}</h1>'

    res = send_partial_v2(grade, output, FORMAT_V2_HTML)
    exit(0 if res else 1)
